# Set Headers and Tokens

$ContentType = "application/json"

$SourceOrganisation = ""
$SourceProject = ""
$SourcePersonalAccessToken = ""
$SourceToken = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$($SourcePersonalAccessToken)"))
$SourceHeader = $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + $SourceToken;accept=$ContentType}

$TargetOrganisation = ""
$TargetProject = ""
$TargetPersonalAccessToken = ""
$TargetToken = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$($TargetPersonalAccessToken)"))
$TargetHeader = $AzureDevOpsAuthenicationHeader = @{Authorization = 'Basic ' + $TargetToken;accept=$ContentType}

$TragetField = "Custom.AutomatedID"

# QUERY TESTCASES WITH Custom.AutomatedID

$Uri = "https://dev.azure.com/$SourceOrganisation/$SourceProject/_apis/wit/wiql?api-version=7.1"
$query = "SELECT [System.Id] FROM WorkItems WHERE [System.TeamProject] = '$SourceProject' AND [Custom.AutomatedID] <> '' ORDER BY [System.ChangedDate] desc"
$body = @{query = $query} | ConvertTo-Json
$SourceWorkItems = Invoke-RestMethod -Method POST -Uri $Uri -Headers $SourceHeader -ContentType $ContentType -Body $body
Write-Host "Found" + $SourceWorkItems.workItems.Count + "Test Cases with Custom.AutomatedID"

# GET Custom.AutomatedID VALUE FOR EVERY WORK ITEM (TEST CASE) AND COPY TO TARGET WORK ITEM

$progress = 0
foreach ($SourceWorkItemId in $SourceWorkItems.workItems.id)
{
    $Uri = "https://dev.azure.com/$SourceOrganisation/$SourceProject/_apis/wit/workitems/$($SourceworkItemId)?api-version=7.1"
    $SourceWorkItem = Invoke-RestMethod -Method GET -Uri $uri -Headers $SourceHeader
    $fieldValue = $SourceWorkItem.fields.'Custom.AutomatedID'

    # GET TRAGET WORK ITEM

    $Uri = "https://dev.azure.com/$TargetOrganisation/$TargetProject/_apis/wit/wiql?api-version=7.1"
    $query = "SELECT [System.Id] FROM WorkItems WHERE [System.TeamProject] = '$TargetProject' AND [Custom.ReflectedWorkItem] = 'https://dev.azure.com/$SourceOrganisation/$SourceProject/_workitems/edit/$SourceworkItemId' ORDER BY [System.ChangedDate] desc"
    $body = @{query = $query} | ConvertTo-Json
    $TargetWorkItems = Invoke-RestMethod -Method POST -Uri $Uri -Headers $TargetHeader -ContentType $ContentType -Body $body

    # CHECK IF THE SOURCE WORK ITEM IS REFERENCED ONLY ONCE

    if ($TargetWorkItems.workItems.Count = 1) {

        # CHECK IF THE TARGET FIELD IS EMPTY

        $Uri = "https://dev.azure.com/$TargetOrganisation/$TargetProject/_apis/wit/workitems/$($TargetWorkItems.workItems[0].id)?api-version=7.1"
        $TargetWorkItem = Invoke-RestMethod -Method GET -Uri $uri -Headers $TargetHeader
        if ($TargetWorkItem.fields.'Custom.AutomatedID' -ne "")
        {
            Write-Host "Target work item's filed Custom.AutomatedID is NOT empty and contains" + $TargetWorkItem.fields.'Custom.AutomatedID'
        } else {

        # UPDATE TARGET WORK ITEM
    
        Write-Host "Copying from Source Item with ID" +  $SourceWorkItemId + "into Target Work Item with ID" + $TargetWorkItems.workItems[0].id
        $Uri = "https://dev.azure.com/$TargetOrganisation/$TargetProject/_apis/wit/workitems/$($TargetWorkItems.workItems[0].id)?api-version=7.1"
        $body = @"
        [
            {
                "op": "add",
                "path": "/fields/Custom.AutomatedID",
                "value": $fieldValue
            }
        ]
"@
        $TargetWorkItem = Invoke-RestMethod -Method PATCH -Uri $uri -Headers $TargetHeader -ContentType 'application/json-patch+json' -Body $body
        Write-Host "The field was updated with the value:" + $fieldValue
        }
    } else {
        Write-Host "Found" + $TargetWorkItems.workItems.Count + "item(s) refering to" + $SourceWorkItemId
    }
}











    #$progress = $progress + 1
    #if ($progress -match '^\d+[0,5]$' ) { Write-Host $progress "/" $count }
